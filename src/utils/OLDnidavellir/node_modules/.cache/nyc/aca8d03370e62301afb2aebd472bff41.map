{"version":3,"file":"tests.cjs.js","sources":["../src/utils/require.js","../src/utils/uintArray.js","../src/utils/hash.js","../src/utils/base.js","../src/hd/paths.js","../src/networks/baseInfo.js","../src/networks/bitcoin.js","../src/core/networkInfo.js","../src/utils/jsonSearch.js","../test/index.js"],"sourcesContent":["const lazyHandler = activeModule => ({\n  get: (target, prop, receiver) => {\n    // If already loaded return the loaded module\n    if (activeModule) return activeModule[prop]\n    // Try to inject the loaded module\n    if (prop === 'inject') {\n      return loadedModule => {\n        activeModule = loadedModule\n        for (const prop in target) {\n          target[prop].inject(activeModule[prop])\n        }\n      }\n    }\n    // Create a new child proxy if this prop not yet exists\n    if (!target[prop]) {\n      target[prop] = new Proxy(function (...args) {\n        if (!activeModule) target()\n        return activeModule[prop](...args)\n      }, lazyHandler())\n    }\n    return target[prop]\n  }\n})\n\nexport const lazify = unsafeModule => {\n  const parentModule = function (injectedModule = {}, loadUnsafe = true) {\n    const defaultModule = loadUnsafe ? unsafeModule() : {}\n    const loadedModule = Object.assign(defaultModule, injectedModule)\n    parentProxy.inject(loadedModule)\n  }\n  const parentProxy = new Proxy(parentModule, lazyHandler())\n  return parentProxy\n}\n","// @flow\n\nexport const isHexString = (hex: string) =>\n  typeof hex === 'string' && /^[0-9a-f]*$/i.test(hex)\n\nexport const toUint8Array = (hexString: string): Uint8Array => {\n  if (!isHexString(hexString)) {\n    throw new Error(`${hexString} is Not a Hex string`)\n  }\n  if (hexString.length % 2 !== 0) hexString = `0${hexString}`\n  const hex = hexString.match(/.{1,2}/g) || []\n  const bytes = hex.map(byte => parseInt(byte, 16))\n  return new Uint8Array(bytes)\n}\n\nexport const fromUint8Array = (bytes: Uint8Array): string =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')\n","// @flow\n\nimport { type Hashes, type SplittedHmac } from '../../types/utils.js'\nimport { lazify } from './require.js'\nimport { fromUint8Array, toUint8Array } from './uintArray.js'\n\nexport const hashjs: Hashes<Uint8Array> = (lazify(() =>\n  require('hash.js')\n): any)\n\nexport const digest = (hash: Function) => (data: string) => {\n  const uintArray = toUint8Array(data)\n  const rawRes = hash()\n    .update(uintArray)\n    .digest()\n  const resArray = new Uint8Array(rawRes)\n  return fromUint8Array(resArray)\n}\n\nexport const digestHmac = (hmac: Function, hash: Function) => (\n  data: string,\n  key: string\n) => {\n  const uintKey = toUint8Array(key)\n  const hmacHash = () => hmac(hash, uintKey)\n  return digest(hmacHash)(data)\n}\n\nexport const sha256 = digest(hashjs.sha256)\nexport const sha512 = digest(hashjs.sha512)\nexport const ripemd160 = digest(hashjs.ripemd160)\nexport const sha512Hmac = digestHmac(hashjs.hmac, hashjs.sha512)\n\nexport const hash256 = (data: string) => sha256(sha256(data))\nexport const hash160 = (data: string) => ripemd160(sha256(data))\nexport const hmacSplit = (key: string, data: string): SplittedHmac => {\n  const hash = sha512Hmac(key, data)\n  const left = hash.slice(0, 64)\n  const right = hash.slice(64, 128)\n  return { left, right }\n}\n","// @flow\n\nimport { Buffer } from 'buffer'\n\nimport basex from 'base-x'\n\nimport {\n  type Alphabet,\n  type BaseCheck,\n  type BaseDecoder,\n  type Bases,\n  type HashFunction\n} from '../../types/utils.js'\nimport { hash256 } from './hash.js'\n\n// The default ALPHABETS, the name of the base codec will be the alphabet's length\nexport const ALPHABETS: Array<Alphabet> = [\n  '01',\n  '01234567',\n  '0123456789a',\n  '0123456789abcdef',\n  '0123456789ABCDEFGHJKMNPQRSTVWXYZ',\n  '0123456789abcdefghijklmnopqrstuvwxyz',\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',\n  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n]\n\nexport const createCheckSumBase = (\n  base: BaseDecoder,\n  hashFunc?: HashFunction<string>\n): BaseDecoder => ({\n  encode: (hexStr: string): string => {\n    const checksum = (hashFunc || hash256)(hexStr)\n    const checkHex = `${hexStr}${checksum.slice(0, 8)}`\n    return base.encode(checkHex)\n  },\n  decode: (baseString: string): string => {\n    const hexStr = base.decode(baseString)\n    const payload = hexStr.slice(0, -8)\n    const newChecksum = (hashFunc || hash256)(payload)\n    const checksum = hexStr.slice(-8)\n    if (newChecksum.startsWith(checksum)) return payload\n    throw new Error('Invalid checksum')\n  }\n})\n\nexport const createHexEncoder = (\n  base: BaseDecoder,\n  hashFunc?: HashFunction<string>\n): BaseCheck => {\n  const newBase = { ...base }\n  const encode: (buf: Buffer) => string = newBase.encode\n  const decode: (str: string) => Buffer = newBase.decode\n  newBase.encode = a => encode(Buffer.from(a, 'hex'))\n  newBase.decode = a => decode(a).toString('hex')\n  return { ...newBase, check: createCheckSumBase(newBase, hashFunc) }\n}\n\nexport const base: Bases = ALPHABETS.reduce((decoders, alphabet) => {\n  const baseDecoder = createHexEncoder(basex(alphabet))\n  return { ...decoders, [alphabet.length]: baseDecoder }\n}, {})\n","// @flow\n\nimport { type HDPathSetting, type HDPathsSetting } from '../../types/core'\nimport { base } from '../utils/base.js'\n// TODO - Actually get bech32\nconst bech32 = base['58'].check\nconst base58 = base['58'].check\n\nconst BasePath: HDPathSetting = {\n  scriptType: 'P2PKH',\n  xpriv: { prefix: 0x0488ade4, stringPrefix: 'xprv', decoder: { base: 'xprv', ...base58 } },\n  xpub: { prefix: 0x0488b21e, stringPrefix: 'xpub', decoder: { base: 'xpub', ...base58 } },\n  address: { prefix: 0x80, stringPrefix: '1', decoder: { base: '1', ...base58 } }\n}\n\nconst SupportedPaths: HDPathsSetting = {\n  '32': BasePath,\n  '44': BasePath,\n  '49': {\n    scriptType: 'P2WPKH-P2SH',\n    xpriv: { prefix: 0x049d7878, stringPrefix: 'yprv', decoder: base58 },\n    xpub: { prefix: 0x049d7cb2, stringPrefix: 'ypub', decoder: base58 },\n    address: { prefix: 0x05, stringPrefix: 'z', decoder: base58 }\n  },\n  '84': {\n    scriptType: 'P2WPKH',\n    xpriv: { prefix: 0x04b2430c, stringPrefix: 'zprv', decoder: base58 },\n    xpub: { prefix: 0x04b24746, stringPrefix: 'zpub', decoder: base58 },\n    address: { prefix: -1, stringPrefix: 'bc', decoder: bech32 }\n  }\n}\n\nexport default SupportedPaths\n","// @flow\n\nimport { type NetworkInfo } from '../../types/core.js'\nimport Paths from '../hd/paths.js'\nimport { base } from '../utils/base.js'\nimport { hash256 } from '../utils/hash.js'\n\nexport const main: NetworkInfo = {\n  coinType: 0,\n  wif: {\n    prefix: 0x80,\n    stringPrefix: '1',\n    decoder: base['58'].check\n  },\n  HDPaths: { '32': Paths['32'], '44': Paths['44'] },\n  DefaultHDPath: 44,\n  txHash: hash256,\n  sigHash: (str: Buffer) => Buffer.from(hash256(str.toString('hex')), 'hex'),\n  forks: [],\n  replayProtection: {\n    forkSighash: 0x00,\n    forcedMinVersion: 0,\n    forkId: 0\n  }\n}\n","// @flow\n\nimport Paths from '../hd/paths.js'\nconst forks = ['bitcoincash', 'bitcoingold', 'bitcoindiamond']\n\nexport const main = {\n  HDPaths: { '49': Paths['49'], '84': Paths['84'] },\n  DefaultHDPath: 84,\n  forks\n}\n\nexport const testnet = {\n  coinType: 1,\n  wif: 0xef,\n  HDPaths: {\n    '32': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 0x6f\n    },\n    '44': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 0x6f\n    },\n    '49': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 0xc4\n    },\n    '84': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 'tb'\n    }\n  }\n}\n","// @flow\n\nimport {\n  type HDPathSetting,\n  type NetworkInfo,\n  type NetworkInfos,\n  type NewNetworks\n} from '../../types/core.js'\nimport { main } from '../networks/baseInfo.js'\nimport * as Networks from '../networks/networks.js'\n\nexport const createInfo = (info: $Shape<NetworkInfo>): NetworkInfo => {\n  const newNetwork: NetworkInfo = ({}: any)\n\n  for (const set in main) {\n    const mainSet = main[set]\n    const infoSet = info[set]\n\n    if (Array.isArray(mainSet)) {\n      newNetwork[set] = (infoSet || [])\n        .concat(mainSet)\n        .filter((v, i, s) => s.indexOf(v) === i)\n    } else if (typeof mainSet === 'object') {\n      newNetwork[set] = { ...mainSet, ...(infoSet || {}) }\n    } else if (typeof infoSet !== 'undefined') {\n      newNetwork[set] = infoSet\n    } else newNetwork[set] = mainSet\n  }\n\n  return newNetwork\n}\n\nexport const createNetworks = (newInfos: NewNetworks) => {\n  const networks = { main }\n  for (const network in newInfos) {\n    const infos = newInfos[network]\n    for (const networkType in infos) {\n      const partialInfo = infos[networkType]\n      let name = network\n      if (networkType !== 'main') name += networkType.toLowerCase()\n      networks[name] = createInfo(partialInfo)\n    }\n  }\n  return networks\n}\n\nexport const networks: NetworkInfos = createNetworks(Networks)\n\nexport const addNetworks = (newInfos: NewNetworks) =>\n  Object.assign(networks, createNetworks(newInfos))\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\nexport const getHDSetting = (value: any, network?: string): HDPathSetting => {\n  // If no network is specified, check all available networks\n  if (!network) {\n    for (const network in networks) {\n      try {\n        return getHDSetting(value, network)\n      } catch (e) {}\n    }\n    throw new Error('Unknown prefix')\n  }\n\n  const { HDPaths } = networks[network]\n  for (const purpose in HDPaths) {\n    const hdPath = HDPaths[purpose]\n    for (const key in hdPath) {\n      const setting = hdPath[key]\n      // checking if address that has legacy\n      if (Array.isArray(setting)) {\n        return setting.find(\n          ({ prefix, stringPrefix }) =>\n            prefix === value || stringPrefix === value\n        )\n      }\n\n      // checking if xpub, xpriv, or address\n      if (\n        typeof setting === 'object' &&\n        (setting.prefix === value || setting.stringPrefix === value)\n      ) {\n        return hdPath\n      }\n\n      // if scriptType or purpose\n      if (setting === value) return hdPath\n    }\n  }\n  throw new Error(`Wrong value: ${value} for network: ${network}`)\n}\n\nexport const getDecoder = (network: string, value: any) => {\n  const hdPath = getHDSetting(value, network)\n  for (const key in hdPath) {\n    const decoder = hdPath[key]\n\n    if (Array.isArray(decoder)) {\n      return decoder.find(\n        ({ prefix, stringPrefix }) =>\n          prefix === value || stringPrefix === value\n      )\n    }\n\n    if (decoder.prefix === value || decoder.stringPrefix === value) {\n      return decoder.decoder\n    }\n  }\n  throw new Error(`Wrong value: ${value} for network: ${network}`)\n}\n","// @flow\n\nimport {\n  type QueryParams,\n  type RecQueryParams\n} from '../../types/utils'\n\nexport const search = (query: QueryParams | string, jsonObj: any): Array<any> => {\n  if (typeof query === 'string') query = { path: query }\n  // If nothing was requested, return the current object\n  if (!query.path) return [jsonObj]\n  // Tokenize the search terms\n  const keys = query.path.split('.')\n  // Remove the root token if exists\n  if (keys[0] === '$') keys.shift()\n  // Call the recursive search\n  return searchRec({ ...query, keys, results: [] }, jsonObj)\n}\n\nconst searchRec = (query: RecQueryParams, jsonObj: any, parent: any): Array<any> => {\n  const { value, results, limit, keys } = query\n\n  // If jsonObj is undefined or we have enough results we can return\n  if (\n    typeof jsonObj === 'undefined' ||\n    (limit && results.length >= limit)) return results\n\n  // If we ran out of keys we check the following possiblities:\n  if (!keys.length) {\n    // 1. If there is no value we can just return the object we are on\n    if (value === undefined) results.push(jsonObj)\n    // 2. If the value equals jsonObj, we need to return the parent\n    else if (value === jsonObj) results.push(parent)\n    // 3. If the jsonObj is an array, we need to decend one last time again\n    else if (Array.isArray(jsonObj)) {\n      jsonObj.forEach(c => searchRec(query, c, jsonObj))\n    }\n  } else if (typeof jsonObj === 'object') {\n    // Get a mutable version of keys\n    let { keys } = query\n\n    // If it's a recursive token, decent into all children\n    // And remove the recursive token from the keys array\n    if (!keys[0]) {\n      keys = keys.slice(1)\n      for (const key in jsonObj) {\n        searchRec(query, jsonObj[key])\n      }\n    }\n\n    const childKey = keys[0]\n    const childQuery = { ...query, keys: keys.slice(1) }\n\n    if (childKey === '*') {\n      for (const key in jsonObj) {\n        searchRec(childQuery, jsonObj[key], jsonObj)\n      }\n    } else {\n      // Decent into child based on the first key in keys\n      // With jsonObj as the parent and shifted keys\n      searchRec(childQuery, jsonObj[childKey], jsonObj)\n    }\n  }\n\n  return results\n}\n","import {\n  getDecoder,\n  getHDSetting,\n  networks\n} from '../src/core/networkInfo.js'\n\nimport { search } from '../src/utils/jsonSearch.js'\n\nconst network = 'main'\n\nconsole.log(1, getHDSetting(76066276, network))\nconsole.log(2, search({ path: `${network}..*`, value: 76066276 }, networks))\nconsole.log(1, getDecoder(network, 76066276))\nconsole.log(2, search({ path: `${network}..prefix`, value: 76066276 }, networks))\n// console.log(2, getDecoder(network, 76066276))\n// console.log(1, getDecoder(network, 'xprv'))\n// console.log(2, getDecoder(network, 'xprv'))\n// console.log(1, getDecoder(network, 76067*358))\n// console.log(2, getDecoder(network, 76067358))\n// console.log(1, getDecoder(network, 'xpub'))\n// console.log(2, getDecoder(network, 'xpub'))\n// console.log(1, getDecoder(network, 128))\n// console.log(2, getDecoder(network, 128))\n// console.log(1, getDecoder(network, '1'))\n// console.log(2, getDecoder(network, '1'))\n"],"names":["lazyHandler","activeModule","get","target","prop","receiver","loadedModule","inject","Proxy","args","lazify","unsafeModule","parentModule","injectedModule","loadUnsafe","defaultModule","Object","assign","parentProxy","isHexString","hex","test","toUint8Array","hexString","Error","length","match","bytes","map","byte","parseInt","Uint8Array","fromUint8Array","reduce","str","toString","padStart","hashjs","require","digest","hash","data","uintArray","rawRes","update","resArray","sha256","hash256","ALPHABETS","createCheckSumBase","base","hashFunc","encode","hexStr","checksum","checkHex","slice","decode","baseString","payload","newChecksum","startsWith","createHexEncoder","newBase","a","Buffer","from","check","decoders","alphabet","baseDecoder","basex","bech32","base58","BasePath","scriptType","xpriv","prefix","stringPrefix","decoder","xpub","address","SupportedPaths","main","coinType","wif","HDPaths","Paths","DefaultHDPath","txHash","sigHash","forks","replayProtection","forkSighash","forcedMinVersion","forkId","testnet","createInfo","info","newNetwork","set","mainSet","infoSet","Array","isArray","concat","filter","v","i","s","indexOf","createNetworks","newInfos","networks","network","infos","networkType","partialInfo","name","toLowerCase","Networks","getHDSetting","value","e","purpose","hdPath","key","setting","find","getDecoder","search","query","jsonObj","path","keys","split","shift","searchRec","results","parent","limit","undefined","push","forEach","c","childKey","childQuery","console","log"],"mappings":"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"}