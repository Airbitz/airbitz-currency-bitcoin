{"version":3,"file":"tests.cjs.js","sources":["../src/utils/require.js","../src/utils/uintArray.js","../src/utils/hash.js","../src/utils/base.js","../src/networks/baseInfo.js","../src/networks/bitcoin.js","../src/core/networkInfo.js","../src/hd/common.js","../src/utils/utils.js","../src/hd/path.js","../src/utils/formatter.js","../src/utils/secp256k1.js","../src/core/privateKey.js","../src/hd/private.js","../src/hd/public.js","../test/hd/path.js"],"sourcesContent":["const lazyHandler = activeModule => ({\n  get: (target, prop, receiver) => {\n    // If already loaded return the loaded module\n    if (activeModule) return activeModule[prop]\n    // Try to inject the loaded module\n    if (prop === 'inject') {\n      return loadedModule => {\n        activeModule = loadedModule\n        for (const prop in target) {\n          target[prop].inject(activeModule[prop])\n        }\n      }\n    }\n    // Create a new child proxy if this prop not yet exists\n    if (!target[prop]) {\n      target[prop] = new Proxy(function (...args) {\n        if (!activeModule) target()\n        return activeModule[prop](...args)\n      }, lazyHandler())\n    }\n    return target[prop]\n  }\n})\n\nexport const lazify = unsafeModule => {\n  const parentModule = function (injectedModule = {}, loadUnsafe = true) {\n    const defaultModule = loadUnsafe ? unsafeModule() : {}\n    const loadedModule = Object.assign(defaultModule, injectedModule)\n    parentProxy.inject(loadedModule)\n  }\n  const parentProxy = new Proxy(parentModule, lazyHandler())\n  return parentProxy\n}\n","// @flow\n\nexport const isHexString = (hex: string) =>\n  typeof hex === 'string' && /^[0-9a-f]*$/i.test(hex)\n\nexport const toUint8Array = (hexString: string): Uint8Array => {\n  if (!isHexString(hexString)) {\n    throw new Error(`${hexString} is Not a Hex string`)\n  }\n  if (hexString.length % 2 !== 0) hexString = `0${hexString}`\n  const hex = hexString.match(/.{1,2}/g) || []\n  const bytes = hex.map(byte => parseInt(byte, 16))\n  return new Uint8Array(bytes)\n}\n\nexport const fromUint8Array = (bytes: Uint8Array): string =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')\n","// @flow\n\nimport { type Hashes } from '../../types/utils.js'\nimport { lazify } from './require.js'\nimport { fromUint8Array, toUint8Array } from './uintArray.js'\n\nexport const hashjs: Hashes<Uint8Array> = (lazify(() =>\n  require('hash.js')\n): any)\n\nexport const digest = (hash: Function) => (data: string) => {\n  const uintArray = toUint8Array(data)\n  const rawRes = hash()\n    .update(uintArray)\n    .digest()\n  const resArray = new Uint8Array(rawRes)\n  return fromUint8Array(resArray)\n}\n\nexport const digestHmac = (hmac: Function, hash: Function) => (\n  key: string,\n  data: string\n) => {\n  const uintKey = toUint8Array(key)\n  const hmacHash = () => hmac(hash, uintKey)\n  return digest(hmacHash)(data)\n}\n\nexport const sha256 = digest(hashjs.sha256)\nexport const sha512 = digest(hashjs.sha512)\nexport const ripemd160 = digest(hashjs.ripemd160)\nexport const sha512Hmac = digestHmac(hashjs.hmac, hashjs.sha512)\n\nexport const hash256 = (data: string) => sha256(sha256(data))\nexport const hash160 = (data: string) => ripemd160(sha256(data))\n","// @flow\n\nimport { Buffer } from 'buffer'\n\nimport basex from 'base-x'\n\nimport {\n  type Alphabet,\n  type BaseCheck,\n  type BaseDecoder,\n  type Bases,\n  type HashFunction\n} from '../../types/utils.js'\nimport { hash256 } from './hash.js'\n\n// The default ALPHABETS, the name of the base codec will be the alphabet's length\nexport const ALPHABETS: Array<Alphabet> = [\n  '01',\n  '01234567',\n  '0123456789a',\n  '0123456789abcdef',\n  '0123456789ABCDEFGHJKMNPQRSTVWXYZ',\n  '0123456789abcdefghijklmnopqrstuvwxyz',\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',\n  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n]\n\nexport const createCheckSumBase = (\n  base: BaseDecoder,\n  hashFunc?: HashFunction<string>\n): BaseDecoder => ({\n  encode: (hexStr: string): string => {\n    const checksum = (hashFunc || hash256)(hexStr)\n    const checkHex = `${hexStr}${checksum.slice(0, 8)}`\n    return base.encode(checkHex)\n  },\n  decode: (baseString: string): string => {\n    const hexStr = base.decode(baseString)\n    const payload = hexStr.slice(0, -8)\n    const newChecksum = (hashFunc || hash256)(payload)\n    const checksum = hexStr.slice(-8)\n    if (newChecksum.startsWith(checksum)) return payload\n    throw new Error('Invalid checksum')\n  }\n})\n\nexport const createHexEncoder = (\n  base: BaseDecoder,\n  hashFunc?: HashFunction<string>\n): BaseCheck => {\n  const newBase = { ...base }\n  const encode: (buf: Buffer) => string = newBase.encode\n  const decode: (str: string) => Buffer = newBase.decode\n  newBase.encode = a => encode(Buffer.from(a, 'hex'))\n  newBase.decode = a => decode(a).toString('hex')\n  return { ...newBase, check: createCheckSumBase(newBase, hashFunc) }\n}\n\nexport const base: Bases = ALPHABETS.reduce((decoders, alphabet) => {\n  const baseDecoder = createHexEncoder(basex(alphabet))\n  return { ...decoders, [alphabet.length]: baseDecoder }\n}, {})\n","// @flow\n\nimport { type NetworkInfo, type HDPathsSetting } from '../../types/core'\nimport { base } from '../utils/base.js'\nimport { hash256 } from '../utils/hash.js'\n\n// TODO - Actually get bech32\nconst bech32 = base['58'].check\nconst base58 = base['58'].check\n\nconst HDPaths: HDPathsSetting = {\n  '32': {\n    scriptType: 'P2PKH',\n    xpriv: { prefix: 0x0488ade4, stringPrefix: 'xprv', decoder: { base: 'xprv', ...base58 } },\n    xpub: { prefix: 0x0488b21e, stringPrefix: 'xpub', decoder: { base: 'xpub', ...base58 } },\n    address: { prefix: 0x80, stringPrefix: '1', decoder: { base: '1', ...base58 } }\n  },\n  '44': {\n    scriptType: 'P2PKH',\n    xpriv: { prefix: 0x0488ade4, stringPrefix: 'xprv', decoder: { base: 'xprv', ...base58 } },\n    xpub: { prefix: 0x0488b21e, stringPrefix: 'xpub', decoder: { base: 'xpub', ...base58 } },\n    address: { prefix: 0x80, stringPrefix: '1', decoder: { base: '1', ...base58 } }\n  },\n  '49': {\n    scriptType: 'P2WPKH-P2SH',\n    xpriv: { prefix: 0x049d7878, stringPrefix: 'yprv', decoder: base58 },\n    xpub: { prefix: 0x049d7cb2, stringPrefix: 'ypub', decoder: base58 },\n    address: { prefix: 0x05, stringPrefix: '3', decoder: base58 }\n  },\n  '84': {\n    scriptType: 'P2WPKH',\n    xpriv: { prefix: 0x04b2430c, stringPrefix: 'zprv', decoder: base58 },\n    xpub: { prefix: 0x04b24746, stringPrefix: 'zpub', decoder: base58 },\n    address: { prefix: -1, stringPrefix: 'bc', decoder: bech32 }\n  }\n}\n\nexport const main: NetworkInfo = {\n  coinType: 0,\n  wif: {\n    prefix: 0x80,\n    stringPrefix: '1',\n    decoder: base['58'].check\n  },\n  HDPaths,\n  DefaultHDPath: 44,\n  txHash: hash256,\n  sigHash: (str: Buffer) => Buffer.from(hash256(str.toString('hex')), 'hex')\n}\n","// @flow\n\nexport const main = { DefaultHDPath: 84 }\n\nexport const testnet = {\n  coinType: 1,\n  wif: 0xef,\n  HDPaths: {\n    '32': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 0x6f\n    },\n    '44': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 0x6f\n    },\n    '49': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 0xc4\n    },\n    '84': {\n      xpriv: {\n        prefix: 0x04358394,\n        stringPrefix: 'tprv'\n      },\n      xpub: {\n        prefix: 0x043587cf,\n        stringPrefix: 'tpub'\n      },\n      address: 'tb'\n    }\n  }\n}\n","// @flow\n\nimport {\n  type HDPathSetting,\n  type NetworkInfo,\n  type NetworkInfos,\n  type NewNetworks\n} from '../../types/core.js'\nimport { main } from '../networks/baseInfo.js'\nimport * as Networks from '../networks/networks.js'\n\nexport const createInfo = (info: $Shape<NetworkInfo>): NetworkInfo => {\n  const newNetwork: NetworkInfo = ({}: any)\n\n  for (const set in main) {\n    const mainSet = main[set]\n    const infoSet = info[set]\n\n    if (Array.isArray(mainSet)) {\n      newNetwork[set] = (infoSet || [])\n        .concat(mainSet)\n        .filter((v, i, s) => s.indexOf(v) === i)\n    } else if (typeof mainSet === 'object') {\n      newNetwork[set] = { ...mainSet, ...(infoSet || {}) }\n    } else if (typeof infoSet !== 'undefined') {\n      newNetwork[set] = infoSet\n    } else newNetwork[set] = mainSet\n  }\n\n  return newNetwork\n}\n\nexport const createNetworks = (newInfos: NewNetworks) => {\n  const networks = { main }\n  for (const network in newInfos) {\n    const infos = newInfos[network]\n    for (const networkType in infos) {\n      const partialInfo = infos[networkType]\n      let name = network\n      if (networkType !== 'main') name += networkType.toLowerCase()\n      networks[name] = createInfo(partialInfo)\n    }\n  }\n  return networks\n}\n\nexport const networks: NetworkInfos = createNetworks(Networks)\n\nexport const addNetworks = (newInfos: NewNetworks) =>\n  Object.assign(networks, createNetworks(newInfos))\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\n// /////////////////\nexport const getHDSetting = (value: any, network?: string): HDPathSetting => {\n  // If no network is specified, check all available networks\n  if (!network) {\n    for (const network in networks) {\n      try {\n        return getHDSetting(value, network)\n      } catch (e) {}\n    }\n    throw new Error('Unknown prefix')\n  }\n\n  const { HDPaths } = networks[network]\n  for (const purpose in HDPaths) {\n    const hdPath = HDPaths[purpose]\n    for (const key in hdPath) {\n      const setting = hdPath[key]\n      // checking if address that has legacy\n      if (Array.isArray(setting)) {\n        return setting.find(\n          ({ prefix, stringPrefix }) =>\n            prefix === value || stringPrefix === value\n        )\n      }\n\n      // checking if xpub, xpriv, or address\n      if (\n        typeof setting === 'object' &&\n        (setting.prefix === value || setting.stringPrefix === value)\n      ) {\n        return hdPath\n      }\n\n      // if scriptType or purpose\n      if (setting === value) return hdPath\n    }\n  }\n  throw new Error(`Wrong value: ${value} for network: ${network}`)\n}\n\nexport const getDecoder = (network: string, value: any) => {\n  const hdPath = getHDSetting(value, network)\n  for (const key in hdPath) {\n    const decoder = hdPath[key]\n\n    if (Array.isArray(decoder)) {\n      return decoder.find(\n        ({ prefix, stringPrefix }) =>\n          prefix === value || stringPrefix === value\n      )\n    }\n\n    if (decoder.prefix === value || decoder.stringPrefix === value) {\n      return decoder.decoder\n    }\n  }\n  throw new Error(`Wrong value: ${value} for network: ${network}`)\n}\n","// @flow\n\nimport { type ExtendedData } from '../../types/hd.js'\nimport { getHDSetting } from '../core/networkInfo.js'\n\nexport const HARDENED = 0x80000000\nexport const SEED = '426974636f696e2073656564'\nexport const MAX_INDEX = 0xffffffff\nexport const MAX_DEPTH = 0xff\nexport const TWEAK_OUT_OF_RANGE_ERROR = 'tweak out of range'\nexport const XKEY_DEFAULTS = {\n  childNumber: 0,\n  parentFingerPrint: 0,\n  depth: 0\n}\n\nexport const dataToHex = (data: ExtendedData): string =>\n  data.version.toString(16).padStart(8, '0') +\n  data.depth.toString(16).padStart(2, '0') +\n  data.parentFingerPrint.toString(16).padStart(8, '0') +\n  data.childNumber.toString(16).padStart(8, '0') +\n  data.chainCode\n\nexport const dataFromHex = (keyHex: string, network?: string): ExtendedData => {\n  // Check the entire hex length\n  if (keyHex.length !== 156) throw new Error('Wrong key length')\n\n  // Check that the key prefix matches the network's prefix if given a network\n  const version = parseInt(keyHex.slice(0, 8), 16)\n  if (network) {\n    const setting = getHDSetting(version, network)\n    if (!setting) throw new Error('Wrong extended key version for network')\n  }\n  return {\n    version,\n    depth: parseInt(keyHex.slice(9, 10), 16),\n    parentFingerPrint: parseInt(keyHex.slice(10, 18), 16),\n    childNumber: parseInt(keyHex.slice(18, 26), 16),\n    chainCode: keyHex.slice(26, 90)\n  }\n}\n","// @flow\n\nexport const isNumeric = (str: string) => /^-{0,1}\\d+$/.test(str)\n","// @flow\n\nimport { type HDPath } from '../../types/hd.js'\nimport { HARDENED, MAX_INDEX } from './common.js'\nimport { isNumeric } from '../utils/utils.js'\n\nconst fromNumber = (index: number, harden: boolean = false): string => {\n  if (index > MAX_INDEX) throw new Error(`Index out of range: ${index}`)\n  // If it's a harden index, we need to set the flag and normalize the index\n  if (index >= HARDENED) {\n    harden = true\n    index = index - HARDENED\n  }\n  return harden ? `${index}'` : `${index}`\n}\n\nconst toNumber = (index: string): number => {\n  // Check for hardened flag\n  const hardened = index[index.length - 1] === '\\''\n  // If hardened, we need to remove the harden flag\n  if (hardened) index = index.slice(0, -1)\n  // Index must be a number\n  if (!isNumeric(index)) throw new Error(`Index must be a number: ${index}`)\n  let indexNumber = parseInt(index)\n  // If hardened, we need to add the HARDENED param to the index\n  if (hardened) indexNumber |= HARDENED\n\n  if (indexNumber > MAX_INDEX) throw new Error(`Index out of range: ${indexNumber}`)\n  return indexNumber\n}\n\nexport const toString = (path: HDPath): string => {\n  try {\n    return 'm/' + path.map(a => fromNumber(a)).join('/')\n  } catch (e) {\n    e.message = `Bad path: ${JSON.stringify(path)}\\n\\t${e.message}`\n    throw e\n  }\n}\n\nexport const fromString = (path: string): HDPath => {\n  try {\n    const pathArr = path.split('/')\n    const root = pathArr.shift().toLowerCase()\n    if (root !== 'm') throw new Error(`Unknown path root: ${root}`)\n    return pathArr.map(toNumber)\n  } catch (e) {\n    e.message = `Bad path: ${path}\\n\\t${e.message}`\n    throw e\n  }\n}\n","// @flow\n\nimport { type FunctionFormatterOptions } from '../../types/utils.js'\nimport { fromUint8Array, toUint8Array } from './uintArray.js'\n\nexport const formatFunction = (\n  func: Function,\n  opts?: FunctionFormatterOptions = {}\n) => {\n  const { numParams = 1, encoder, results = [], sync } = opts\n  const { input = toUint8Array, output = fromUint8Array } = encoder || {}\n\n  const encode = (i: number, cps = a => a) => {\n    if (!i--) return cps\n    const newCps = (p: any) => {\n      p[i] = input(p[i])\n      return cps(p)\n    }\n    return encode(i, newCps)\n  }\n\n  const paramEncoder = encode(numParams)\n\n  let encodeResult = (res: any) => output(res)\n  if (!results) {\n    encodeResult = (res: any) => res\n  } else if (results.length) {\n    encodeResult = (res: any) => {\n      for (const param of results) {\n        res[param] = output(res[param])\n      }\n      return res\n    }\n  }\n\n  let waitResult = async (res: any) => {\n    res = await res\n    return encodeResult(res)\n  }\n  if (sync) waitResult = (res: any) => encodeResult(res)\n\n  return (...params: any): any => {\n    const result = func(...paramEncoder(params))\n    return waitResult(result)\n  }\n}\n\nexport const formatByteSize = (\n  originalByteSize: number,\n  newByteSize: number,\n  pad: boolean = originalByteSize > newByteSize\n) => (data: Array<number>) => {\n  let acc = 0\n  let bits = 0\n  const ret = []\n  const maxNum = (1 << newByteSize) - 1\n  for (let p = 0; p < data.length; ++p) {\n    const value = data[p]\n    if (value < 0 || value >> originalByteSize !== 0) {\n      throw new Error('Wrong bit value')\n    }\n    acc = (acc << originalByteSize) | value\n    bits += originalByteSize\n    while (bits >= newByteSize) {\n      bits -= newByteSize\n      ret.push((acc >> bits) & maxNum)\n    }\n  }\n  if (pad && bits > 0) {\n    ret.push((acc << (newByteSize - bits)) & maxNum)\n  } else if (\n    bits >= originalByteSize ||\n    (acc << (newByteSize - bits)) & maxNum\n  ) {\n    throw new Error('Wrong bit value')\n  }\n  return ret\n}\n","// @flow\n\nimport { type Secp256k1 } from '../../types/utils.js'\nimport { formatFunction } from './formatter.js'\nimport { lazify } from './require.js'\n\nexport const secp256k1: Secp256k1<Uint8Array> = (lazify(() =>\n  require('secp256k1')\n): any)\n\nconst encoder = {\n  input: a => Buffer.from(a, 'hex'),\n  output: a => a.toString('hex')\n}\n\nexport const publicKeyCreate = formatFunction(secp256k1.publicKeyCreate, {\n  encoder\n})\nexport const signatureNormalize = formatFunction(secp256k1.signatureNormalize, {\n  encoder\n})\nexport const signatureExport = formatFunction(secp256k1.signatureExport, {\n  encoder\n})\nexport const privateKeyTweakAdd = formatFunction(secp256k1.privateKeyTweakAdd, {\n  encoder,\n  numParams: 2\n})\nexport const publicKeyTweakAdd = formatFunction(secp256k1.publicKeyTweakAdd, {\n  encoder,\n  numParams: 2\n})\nexport const verify = formatFunction(secp256k1.verify, {\n  encoder,\n  numParams: 3,\n  results: null\n})\nexport const signature = formatFunction(secp256k1.sign, {\n  encoder,\n  numParams: 2,\n  results: ['signature']\n})\n\nexport const sign = (message: string, privateKey: string) =>\n  signature(message, privateKey)\n    .then(({ signature }) => signature)\n    .then(signatureNormalize)\n    .then(signatureExport)\n","// @flow\n\nimport { networks } from './networkInfo.js'\nimport {\n  publicKeyCreate,\n  sign as Sign,\n  verify as Verify\n} from '../../src/utils/secp256k1.js'\n\nexport const fromWIF = (\n  wif: string,\n  network: string = 'main'\n): { privateKey: string, compress: boolean } => {\n  const { prefix, decoder } = networks[network].wif\n  const keyHex = decoder.decode(wif)\n  if (parseInt(keyHex.slice(0, 2), 16) !== prefix) {\n    throw new Error(\n      `Unknown key prefix ${keyHex.slice(0, 2)} for network ${network}`\n    )\n  }\n  const privateKey = keyHex.slice(2, 66)\n  let compress = false\n  if (keyHex.length >= 68) {\n    if (parseInt(keyHex.slice(66, 68), 16) !== 1) {\n      throw new Error(`Unknown compression flag ${keyHex.slice(66, 68)}`)\n    }\n    compress = true\n  }\n  return { privateKey, compress }\n}\n\nexport const toWIF = (\n  privateKey: string,\n  network: string = 'main',\n  compress: boolean = true\n): string => {\n  if (privateKey.length !== 64) throw new Error(`Wrong key length`)\n  const { prefix, decoder } = networks[network].wif\n  const prefixStr = prefix.toString(16)\n  const compressFlag = compress ? '01' : ''\n  const hexKey = `${prefixStr}${privateKey}${compressFlag}`\n  return decoder.encode(hexKey)\n}\n\nexport const toPublic = async (\n  privateKey: string,\n  compress: boolean = true\n): Promise<string> => publicKeyCreate(privateKey, compress)\n\nexport const sign = async (privateKey: string, msg: string): Promise<string> => Sign(msg, privateKey)\n\nexport const verify = async (\n  msg: string,\n  signature: string,\n  publicKey?: string,\n  privateKey?: string\n): Promise<Boolean> => {\n  if (!publicKey) {\n    if (!privateKey) throw new Error('Cannot verify without keys.')\n    publicKey = await publicKeyCreate(privateKey, true)\n  }\n  const verified = await Verify(msg, signature, publicKey)\n  return verified\n}\n","// @flow\n\nimport { getHDSetting, getDecoder } from '../core/networkInfo.js'\nimport {\n  type HDPath,\n  type ExtendedPrivateKey,\n  type ExtendedPublicKey\n} from '../../types/hd.js'\nimport { dataFromHex, dataToHex, XKEY_DEFAULTS, HARDENED, SEED, MAX_INDEX, MAX_DEPTH, TWEAK_OUT_OF_RANGE_ERROR } from './common.js'\nimport { sha512Hmac, hash160 } from '../utils/hash.js'\nimport * as Path from './path.js'\nimport { toPublic as toPublicKey } from '../core/privateKey.js'\nimport { privateKeyTweakAdd } from '../utils/secp256k1.js'\n\nexport const fromExtendedKey = (xKey: $Shape<ExtendedPrivateKey>, network?: string): ExtendedPrivateKey => {\n  if (!xKey.chainCode) return fromSeed(xKey.privateKey)\n  const fullKey = { ...XKEY_DEFAULTS, ...xKey }\n  if (!fullKey.version) {\n    const { xpriv: { prefix } } = getHDSetting('xprv', network)\n    fullKey.version = prefix\n  }\n  return fullKey\n}\n\nexport const fromSeed = (\n  seed: string,\n  network?: string,\n  version: string = 'xprv'\n): ExtendedPrivateKey => {\n  const hash = sha512Hmac(SEED, seed)\n  const { xpriv: { prefix } } = getHDSetting(version, network)\n  return fromExtendedKey({\n    privateKey: hash.slice(0, 64),\n    chainCode: hash.slice(64, 128),\n    version: prefix\n  }, network)\n}\n\nexport const fromHex = (keyHex: string, network?: string): ExtendedPrivateKey => {\n  // Get the byte which tells us what type of key we're expecting\n  const headerByte = parseInt(keyHex.slice(90, 92), 16)\n  if (headerByte !== 0) throw new Error('Wrong private key header')\n\n  return {\n    privateKey: keyHex.slice(92, 156),\n    ...dataFromHex(keyHex, network)\n  }\n}\n\nexport const fromString = (\n  xKey: string,\n  network: string = 'main'\n): ExtendedPrivateKey => {\n  const keyHex = getDecoder(network, xKey.slice(0, 4)).decode(xKey)\n  return fromHex(keyHex, network)\n}\n\nexport const fromIndex = async (\n  key: ExtendedPrivateKey,\n  index: number,\n  publicKey?: string,\n  hardended: boolean = false\n): Promise<ExtendedPrivateKey> => {\n  try {\n    const { depth, version, privateKey, chainCode } = key\n    if (index > MAX_INDEX) throw new Error('Index out of range.')\n    if (depth >= MAX_DEPTH) throw new Error('Depth too high.')\n    publicKey = publicKey || await toPublicKey(privateKey, true)\n\n    // If the index is non-hardended, set 'tweakKey' to be the publicKey, otherwise the privateKey\n    let tweakKey = index < HARDENED || hardended ? publicKey : `00${privateKey}`\n    tweakKey += index.toString(16).padStart(8, '0')\n    console.log('73. tweakKey', tweakKey)\n    console.log('76. chainCode', chainCode)\n    const hash = sha512Hmac(chainCode, tweakKey)\n\n    const childKey = await privateKeyTweakAdd(privateKey, hash.slice(0, 64))\n    const parentFingerPrint = publicKey ? hash160(publicKey).slice(0, 8) : 0\n\n    return {\n      privateKey: childKey,\n      childNumber: index,\n      chainCode: hash.slice(64, 128),\n      depth: depth + 1,\n      parentFingerPrint: parseInt(parentFingerPrint, 16),\n      version\n    }\n  } catch (e) {\n    if (!e.message.includes(TWEAK_OUT_OF_RANGE_ERROR)) throw e\n    return fromIndex(key, index + 1, publicKey)\n  }\n}\n\nexport const fromPath = async (key: ExtendedPrivateKey, path: HDPath | string, publicKey?: string) => {\n  if (typeof path === 'string') path = Path.fromString(path)\n  publicKey = publicKey || await toPublicKey(key.privateKey, true)\n  for (const index of path) {\n    key = await fromIndex(key, index, publicKey)\n    publicKey = await toPublicKey(key.privateKey, true)\n  }\n  return key\n}\n\nexport const toHex = (key: ExtendedPrivateKey): string => {\n  if (key.privateKey.length !== 64) throw new Error('Wrong private key length')\n  return dataToHex(key) + `00${key.privateKey}`\n}\n\nexport const toString = (\n  hdKey: ExtendedPrivateKey,\n  network: string = 'main'\n): string => getDecoder(network, hdKey.version).encode(toHex(hdKey))\n\nexport const toPublic = async (hdKey: ExtendedPrivateKey, network?: string): Promise<ExtendedPublicKey> => {\n  const { privateKey, ...rest } = hdKey\n  const { xpub: { prefix: version } } = getHDSetting(hdKey.version, network)\n  const publicKey = await toPublicKey(privateKey, true)\n  return { ...rest, version, publicKey }\n}\n","// @flow\n\nimport { getDecoder, getHDSetting } from '../core/networkInfo.js'\nimport { dataFromHex, dataToHex, XKEY_DEFAULTS, HARDENED, MAX_INDEX, MAX_DEPTH, TWEAK_OUT_OF_RANGE_ERROR } from './common.js'\nimport { sha512Hmac, hash160 } from '../utils/hash.js'\nimport { publicKeyTweakAdd } from '../utils/secp256k1.js'\nimport * as Path from './path.js'\nimport { type HDPath, type ExtendedPublicKey } from '../../types/hd.js'\n\nexport const fromExtendedKey = (key: $Shape<ExtendedPublicKey>, network?: string): ExtendedPublicKey => {\n  const xKey = { ...XKEY_DEFAULTS, ...key }\n  if (!xKey.version) {\n    const { xpub: { prefix } } = getHDSetting('xpub', network)\n    xKey.version = prefix\n  }\n  return xKey\n}\n\nexport const fromHex = (keyHex: string, network?: string): ExtendedPublicKey => {\n  // Get the byte which tells us what type of key we're expecting\n  const headerByte = parseInt(keyHex.slice(90, 92), 16)\n  if (headerByte !== 2 && headerByte !== 3) throw new Error('Wrong public key header')\n\n  return {\n    publicKey: keyHex.slice(90, 156),\n    ...dataFromHex(keyHex, network)\n  }\n}\n\nexport const fromString = (\n  hdKey: string,\n  network: string = 'main'\n): ExtendedPublicKey => {\n  const keyHex = getDecoder(network, hdKey.slice(0, 4)).decode(hdKey)\n  return fromHex(keyHex, network)\n}\n\nexport const fromIndex = async (key: ExtendedPublicKey, index: number): Promise<ExtendedPublicKey> => {\n  try {\n    const { depth, version, publicKey, chainCode } = key\n    if (index >= HARDENED) throw new Error('Cannot derive hardened index from a public key')\n    if (index > MAX_INDEX) throw new Error('Index out of range.')\n    if (depth >= MAX_DEPTH) throw new Error('Depth too high.')\n\n    const tweakKey = publicKey + index.toString(16).padStart(8, '0')\n    const hash = sha512Hmac(chainCode, tweakKey)\n    const childKey = await publicKeyTweakAdd(publicKey, hash.slice(0, 64))\n    const parentFingerPrint = hash160(publicKey).slice(0, 8)\n\n    return {\n      publicKey: childKey,\n      childNumber: index,\n      chainCode: hash.slice(64, 128),\n      depth: depth + 1,\n      parentFingerPrint: parseInt(parentFingerPrint, 16),\n      version\n    }\n  } catch (e) {\n    if (!e.message.includes(TWEAK_OUT_OF_RANGE_ERROR)) throw e\n    return fromIndex(key, index + 1)\n  }\n}\n\nexport const fromPath = async (key: ExtendedPublicKey, path: HDPath | string) => {\n  if (typeof path === 'string') path = Path.fromString(path)\n  for (const index of path) {\n    key = await fromIndex(key, index)\n  }\n  return key\n}\n\nexport const toHex = (key: ExtendedPublicKey): string =>\n  dataToHex(key) + key.publicKey\n\nexport const toString = (\n  hdKey: ExtendedPublicKey,\n  network: string = 'main'\n): string => getDecoder(network, hdKey.version).encode(toHex(hdKey))\n","// @flow\n\n// import { assert } from 'chai'\nimport { describe, it } from 'mocha'\n\n// import * as HDKey from '../../src/hd/hdKey.js'\nimport * as Private from '../../src/hd/private.js'\nimport * as Public from '../../src/hd/public.js'\n// import * as Paths from '../../src/hd/paths.js'\nimport fixtures from './fixtures/path.json'\n\nconst network = 'main'\n\ndescribe('Testing Bip44 HD Key path derivation', function () {\n  fixtures.createPaths.forEach(test => {\n    it(`Deriving HD key ${test[0]} from HD Settings ${\n      test[3]\n    }`, async function () {\n      const xkey = test[0]\n      const parentKey = Private.fromString(xkey, network)\n\n      let account = 0\n      let coinType = 0\n      let bips = test[2]\n      if (!bips) bips = [84]\n      if (test[1]) {\n        account = test[1][0]\n        coinType = test[1][1]\n      }\n      for (const purpose of bips) {\n        if (purpose === 32) {\n          const path1 = ['m', `${account}`, 0].join('/')\n          console.log('30. path1', path1)\n          const hdKey = await Private.fromPath(parentKey, path1)\n          console.log('34. hdKey', hdKey)\n          const xprivkey = Private.toString(hdKey, network)\n          console.log('36. xprivkey', xprivkey)\n          const pubKey = await Private.toPublic(hdKey)\n          const xpubkey = Public.toString(pubKey, network)\n          console.log('39. xpubkey', xpubkey)\n        } else {\n          const path1 = ['m', `${purpose}'`, `${coinType}'`, `${account}'`, 0].join('/')\n          console.log('30. path1', path1)\n          const hdKey1 = await Private.fromPath(parentKey, path1)\n          console.log('39. hdKey1', hdKey1)\n          const path2 = ['m', `${purpose}'`, `${coinType}'`, `${account}'`, 1].join('/')\n          console.log('32. path2', path2)\n          const hdKey2 = await Private.fromPath(parentKey, path1)\n          console.log('43. hdKey2', hdKey2)\n        }\n\n        // console.log([ purpose, coinType, account, 0 ])\n        // const receive = Paths.toString([ purpose, coinType, account, 0 ])\n        // console.log('29. receive', receive)\n        // const change = Paths.toString([ purpose, coinType, account, 1 ])\n        // console.log('31. change', change)\n      }\n      // const hdKey = await HDKey.fromPaths(parentKey, hdPaths, network)\n      // let testIndex = 3\n      // for (const hdPath of hdPaths) {\n      //   const key: any = HDKey.getKey(hdKey, hdPath.path)\n      //   if (!key) throw new Error('No Key')\n\n      //   const xprivkey = Private.toString(key, network)\n      //   const pubKey = await Private.toPublic(key)\n      //   const xpubkey = Public.toString(pubKey, network)\n      //   assert.equal(xprivkey, test[testIndex++], 'xpriv')\n      //   assert.equal(xpubkey, test[testIndex++], 'xpub')\n      // }\n    })\n  })\n})\n"],"names":["lazyHandler","activeModule","get","target","prop","receiver","loadedModule","inject","Proxy","args","lazify","unsafeModule","parentModule","injectedModule","loadUnsafe","defaultModule","Object","assign","parentProxy","isHexString","hex","test","toUint8Array","hexString","Error","length","match","bytes","map","byte","parseInt","Uint8Array","fromUint8Array","reduce","str","toString","padStart","hashjs","require","digest","hash","data","uintArray","rawRes","update","resArray","digestHmac","hmac","key","uintKey","hmacHash","sha256","ripemd160","sha512Hmac","sha512","hash256","hash160","ALPHABETS","createCheckSumBase","base","hashFunc","encode","hexStr","checksum","checkHex","slice","decode","baseString","payload","newChecksum","startsWith","createHexEncoder","newBase","a","Buffer","from","check","decoders","alphabet","baseDecoder","basex","bech32","base58","HDPaths","scriptType","xpriv","prefix","stringPrefix","decoder","xpub","address","main","coinType","wif","DefaultHDPath","txHash","sigHash","testnet","createInfo","info","newNetwork","set","mainSet","infoSet","Array","isArray","concat","filter","v","i","s","indexOf","createNetworks","newInfos","networks","network","infos","networkType","partialInfo","name","toLowerCase","Networks","getHDSetting","value","e","purpose","hdPath","setting","find","getDecoder","HARDENED","MAX_INDEX","MAX_DEPTH","TWEAK_OUT_OF_RANGE_ERROR","dataToHex","version","depth","parentFingerPrint","childNumber","chainCode","dataFromHex","keyHex","isNumeric","toNumber","index","hardened","indexNumber","fromString","path","pathArr","split","root","shift","message","formatFunction","func","opts","numParams","encoder","results","sync","input","output","cps","newCps","p","paramEncoder","encodeResult","res","param","waitResult","params","result","secp256k1","publicKeyCreate","signatureNormalize","signatureExport","privateKeyTweakAdd","publicKeyTweakAdd","verify","signature","sign","toPublic","privateKey","compress","fromHex","headerByte","xKey","fromIndex","publicKey","hardended","toPublicKey","tweakKey","console","log","childKey","includes","fromPath","Path","toHex","hdKey","rest","describe","fixtures","createPaths","forEach","it","xkey","parentKey","Private","account","bips","path1","join","xprivkey","pubKey","xpubkey","Public","hdKey1","path2","hdKey2"],"mappings":"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"}